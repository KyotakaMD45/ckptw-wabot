const api = require("./api.js");
const { bold, italic, monospace, quote } = require("@mengkodingan/ckptw");
const axios = require("axios");

async function get(type) {
    try {
        let text = "";

        const createList = (data, formatter) =>
            `${data.map(formatter).join(`\n${quote("â”€â”€â”€â”€â”€")}\n`)}\n` +
            "\n" +
            config.msg.footer;

        switch (type) {
            case "alkitab": {
                const data = (await axios.get(api.createUrl("https://beeble.vercel.app", "/api/v1/passage/list", {}))).data.data;
                text = createList(data, d =>
                    `${quote(`Livre: ${d.name} (${d.abbr})`)}\n` +
                    `${quote(`Nombre de chapitres: ${d.chapter}`)}`
                );
                break;
            }
            case "alquran": {
                const data = (await axios.get(api.createUrl("https://equran.id", "/api/v2/surat", {}))).data.data;
                text = createList(data, d =>
                    `${quote(`Sourate: ${d.namaLatin} (${d.nomor})`)}\n` +
                    `${quote(`Nombre de versets: ${d.jumlahAyat}`)}`
                );
                break;
            }
            case "claim": {
                const data = [
                    "daily (RÃ©compense quotidienne)",
                    "weekly (RÃ©compense hebdomadaire)",
                    "monthly (RÃ©compense mensuelle)",
                    "yearly (RÃ©compense annuelle)"
                ];
                text = createList(data, d => `${quote(d)}`);
                break;
            }
            case "fixdb": {
                const data = [
                    "user (DonnÃ©es des utilisateurs)",
                    "group (DonnÃ©es des groupes)",
                    "menfess (DonnÃ©es des messages anonymes)"
                ];
                text = createList(data, d => `${quote(d)}`);
                break;
            }
            case "group": {
                const data = [
                    "open (Ouvrir le groupe)",
                    "close (Fermer le groupe)",
                    "lock (Verrouiller le groupe)",
                    "unlock (DÃ©verrouiller le groupe)"
                ];
                text = createList(data, d => `${quote(d)}`);
                break;
            }
            case "mode": {
                const data = [
                    "group (Mode groupe, ne rÃ©pond que dans les discussions de groupe)",
                    "private (Mode privÃ©, ne rÃ©pond que dans les discussions privÃ©es)",
                    "public (Mode public, rÃ©pond dans les groupes et en privÃ©)",
                    "self (Mode autonome, ne rÃ©pond qu'Ã  lui-mÃªme et Ã  son propriÃ©taire)"
                ];
                text = createList(data, d => `${quote(d)}`);
                break;
            }
            case "osettext": {
                const data = [
                    "donate (Variables disponibles: %tag%, %name%, %version%, %prefix%, %command%, %watermark%, %footer%, %readmore%) (DÃ©finir le texte des dons)",
                    "price (Variables disponibles: %tag%, %name%, %version%, %prefix%, %command%, %watermark%, %footer%, %readmore%) (DÃ©finir le texte des prix)"
                ];
                text = createList(data, d => `${quote(d)}`);
                break;
            }
            case "setoption": {
                const data = [
                    "antilink (Anti-lien)",
                    "antinsfw (Anti-NSFW, comme la pornographie)",
                    "antisticker (Anti-sticker)",
                    "antitoxic (Anti-toxic, empÃªche le langage vulgaire)",
                    "autokick (Expulsion automatique en cas d'infraction Ã  une rÃ¨gle 'anti...')",
                    "welcome (Message de bienvenue)"
                ];
                text = createList(data, d => `${quote(d)}`);
                break;
            }
            case "setprofile": {
                const data = [
                    "autolevelup (Niveau automatique)"
                ];
                text = createList(data, d => `${quote(d)}`);
                break;
            }
            case "settext": {
                const data = [
                    "goodbye (Message d'au revoir, variables disponibles: %tag%, %subject%, %description%) (DÃ©finir le message d'adieu)",
                    "intro (Message d'introduction)",
                    "welcome (Message de bienvenue, variables disponibles: %tag%, %subject%, %description%) (DÃ©finir le message de bienvenue)"
                ];
                text = createList(data, d => `${quote(d)}`);
                break;
            }
            case "translate": {
                const data = (await axios.get(api.createUrl("nyxs", "/tools/translate", {})).catch(err => err.response?.data?.available_languange)) || [];
                text = createList(data, d =>
                    `${quote(`Code: ${d.code}`)}\n` +
                    `${quote(`Langue: ${d.bahasa}`)}`
                );
                break;
            }
            case "tts": {
                const data = (await axios.get(api.createUrl("nyxs", "/tools/tts", {}))).data.available_languange;
                text = createList(data, d =>
                    `${quote(`Code: ${d.code}`)}\n` +
                    `${quote(`Langue: ${d["bahasa negara"]}`)}`
                );
                break;
            }
            default: {
                text = quote(`ðŸš¨ Type inconnu: ${type}`);
                break;
            }
        }

        return text;
    } catch (error) {
        consolefy.error(`Erreur: ${error}`);
        return null;
    }
}

module.exports = {
    get
};
